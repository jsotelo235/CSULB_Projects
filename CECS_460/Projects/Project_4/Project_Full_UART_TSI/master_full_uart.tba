; Jose Sotelo
; CECS 460
; Full duplex UART and TramelBlaze Assembly

;=======================================================
;	Define Variables Alias
;=======================================================
ZERO				EQU		0000
ONE					EQU		0001
PORT				EQU		0001
LED_PORT			EQU		0005
RX_RDY				EQU		0001
TX_RDY				EQU		0002

ASCII_BS			EQU		0008					; backspace
ASCII_TAB			EQU		0009					; tab
ASCII_LF			EQU		000A					; line feed
ASCII_CR			EQU		000D					; carriage return
ASCII_SLASH			EQU		002F					; '/'
ASCII_EQUALS		EQU		003D					; '=' 
ASCII_ASTERISK		EQU		002A					; '*'
ASCII_AT			EQU		0040					; @
ASCII_DOT			EQU		002E					; '.'
ASCII_SPACE			EQU		0020					; space
ASCII_GREATER		EQU		003E					; >
ASCII_COLON			EQU		003A					; ':'
ASCII_B_SLASH		EQU		005C					; '\'

ASCII_ZERO			EQU		0030
ASCII_ONE			EQU		0031
ASCII_TWO			EQU		0032
ASCII_THREE			EQU		0033
ASCII_FOUR			EQU		0034
ASCII_FIVE			EQU		0035
ASCII_SIX			EQU		0036
ASCII_SEVEN			EQU		0037
ASCII_EIGHT			EQU		0038
ASCII_NINE			EQU		0039
ASCII_A				EQU		0041
ASCII_B				EQU		0042
ASCII_C				EQU		0043
ASCII_D				EQU		0044
ASCII_E				EQU		0045
ASCII_F				EQU		0046
ASCII_G				EQU		0047
ASCII_H				EQU		0048
ASCII_I				EQU		0049
ASCII_J				EQU		004A
ASCII_K				EQU		004B
ASCII_L				EQU		004C
ASCII_M				EQU		004D
ASCII_N				EQU		004E
ASCII_O				EQU		004F
ASCII_P				EQU		0050
ASCII_Q				EQU		0051
ASCII_R				EQU		0052
ASCII_S				EQU		0053
ASCII_T				EQU		0054
ASCII_U				EQU		0055
ASCII_V				EQU		0056
ASCII_W				EQU		0057
ASCII_X				EQU		0058
ASCII_Y				EQU		0059
ASCII_Z				EQU		005A

;=======================================================
;	Register Alias
;=======================================================
TEMP_REG			EQU		R0						; temporay register
POINTER				EQU		R1						; register used to point to scratchpad memory location
COUNTER				EQU		R2						; register used to keep track of how many forward slash to print
COUNT				EQU		R3						; register used to keep track of how many forward slash to print at the end of the banner
UART_STATUS			EQU		R4						; register used to store the current status of UART signals
CURRENT_CASE		EQU		R5						; register used to keep track of which case to display
CHAR_COUNT			EQU		R6						; register used to keep track of the character count
STORE_DATA			EQU		R7						; register used to store the data received

;=======================================================
;	Start
;	Startup Code Initialization
;	only executed at startup (reset)
;=======================================================
START   
		LOAD	TEMP_REG,	  ZERO					; load register R0 with 0000
		LOAD	POINTER,	  ZERO					; load register R1 with 0000
		LOAD	COUNTER,	  ZERO					; load register R2 with 0000
		LOAD	COUNT,		  ZERO					; load register R3 with 0000
		LOAD	UART_STATUS,  ZERO					; load register R4 with 0000
		LOAD	CURRENT_CASE, ONE					; load register R5 with 0001 to display banner first

		CALL	BANNER								; unconditionally call subroutine BANNER
		CALL	PROMPT_USER							; unconditionally call subroutine PROMPT_USER
		CALL	TOWN								; unconditionally call subroutine TOWN
		CALL	BACKSPACE							; unconditionally call subroutine BACKSPACE
		CALL	CRLF								; unconditionally call subroutine CRLF
													
		ENINT										; enable interrupts
        JUMP    MAIN
	
;=======================================================
;	Banner Subroutine
;	Banner is executed on startup
;	/////////////////////////////////
;		CSULB CECS 460   
;		Jose Sotelo				   
;	/////////////////////////////////
;=======================================================
BANNER

			LOAD	TEMP_REG, 	ASCII_SLASH			; load the ASCII value for '/' to temporay register		
ADD_SLASH	STORE	TEMP_REG, 	COUNTER				; store the temp reg into scratchpad						
			ADD		COUNTER,	0001				; increment pointer to point to scratchpad location		
			
			COMP	COUNTER,  	0028				; if rX == kk then ZERO = 1; if rx < kk then CARRY = 1
			JUMPC	ADD_SLASH						; if CARRY PC <â€” ADD_SLASH
			
			LOAD	TEMP_REG,	ASCII_CR			; load the ASCII value for <CR>
			STORE	TEMP_REG,	0029				; store the temp reg into scratchpad location (41)
			
			LOAD	TEMP_REG, 	ASCII_LF			; load the ASCII value for <LF>
			STORE	TEMP_REG,	002A				; store the temp reg into scratchpad location (42)
			
			LOAD	TEMP_REG,	ASCII_TAB			; load the ASCII value for tab
			STORE	TEMP_REG,	002B				; store the temp reg into scratchpad location (43)
			
			LOAD	TEMP_REG,	ASCII_C				; load the ASCII value for C
			STORE 	TEMP_REG, 	002C				; store the temp reg into scratchpad location (44)
			
			LOAD	TEMP_REG,	ASCII_S				; load the ASCII value for S
			STORE 	TEMP_REG, 	002D				; store the temp reg into scratchpad location (45)
			
			LOAD	TEMP_REG,	ASCII_U				; load the ASCII value for U
			STORE 	TEMP_REG, 	002E				; store the temp reg into scratchpad location (46)
			
			LOAD	TEMP_REG,	ASCII_L				; load the ASCII value for L
			STORE 	TEMP_REG, 	002F				; store the temp reg into scratchpad location (47)
			
			LOAD	TEMP_REG,	ASCII_B				; load the ASCII value for B
			STORE 	TEMP_REG, 	0030				; store the temp reg into scratchpad locaiton (48)
			
			LOAD	TEMP_REG, 	ASCII_SPACE			; load the ASCII value for space
			STORE	TEMP_REG,	0031				; store the temp reg into scratchpad location (49)
			
			LOAD	TEMP_REG,	ASCII_C				; load the ASCII value for C
			STORE 	TEMP_REG, 	0032				; store the temp reg into scratchpad location (50)
			
			LOAD	TEMP_REG,	ASCII_E				; load the ASCII value for E
			STORE 	TEMP_REG, 	0033				; store the temp reg into scratchpad location (51)
			
			LOAD	TEMP_REG,	ASCII_C				; load the ASCII value for C
			STORE 	TEMP_REG, 	0034				; store the temp reg into scratchpad location (52)
			
			LOAD	TEMP_REG,	ASCII_S				; load the ASCII value for S
			STORE 	TEMP_REG, 	0035				; store the temp reg into scratchpad location (53)
			
			LOAD	TEMP_REG, 	ASCII_SPACE			; load the ASCII value for space
			STORE	TEMP_REG,	0036				; store the temp reg into scratchpad location (54)
			
			LOAD	TEMP_REG, 	ASCII_FOUR			; load the ASCII value for space
			STORE	TEMP_REG,	0037				; store the temp reg into scratchpad location (55)
			
			LOAD	TEMP_REG, 	ASCII_SIX			; load the ASCII value for space
			STORE	TEMP_REG,	0038				; store the temp reg into scratchpad location (56)
			
			LOAD	TEMP_REG, 	ASCII_ZERO			; load the ASCII value for space
			STORE	TEMP_REG,	0039				; store the temp reg into scratchpad location (57)
			
			LOAD	TEMP_REG,	ASCII_CR			; load the ASCII value for <CR>
			STORE	TEMP_REG,	003A				; store the temp reg into scratchpad location (58)
			
			LOAD	TEMP_REG, 	ASCII_LF			; load the ASCII value for <LF>
			STORE	TEMP_REG,	003B				; store the temp reg into scratchpad location (59)
			
			LOAD	TEMP_REG,	ASCII_TAB			; load the ASCII value for tab
			STORE	TEMP_REG,	003C				; store the temp reg into scratchpad location (60)
			
			LOAD	TEMP_REG,	ASCII_SPACE			; load the ASCII value for space
			STORE	TEMP_REG,	003D				; store the temp reg into scratchpad location (61)
		
			LOAD	TEMP_REG,	ASCII_J				; load the ASCII value for J
			STORE	TEMP_REG,	003E				; store the temp reg into scratchpad location (62)
			
			LOAD	TEMP_REG,	ASCII_O				; load the ASCII value for o
			STORE	TEMP_REG,	003F				; store the temp reg into scratchpad location (63)
			
			LOAD	TEMP_REG,	ASCII_S				; load the ASCII value for e
			STORE	TEMP_REG,	0040				; store the temp reg into scratchpad location (64)
			
			LOAD	TEMP_REG,	ASCII_E				; load the ASCII value for e
			STORE	TEMP_REG,	0041				; store the temp reg into scratchpad location (65)
			
			LOAD	TEMP_REG,	ASCII_SPACE			; load the ASCII value for space
			STORE	TEMP_REG,	0042				; store the temp reg into scratchpad location (66)
			
			LOAD	TEMP_REG,	ASCII_S				; load the ASCII value for S
			STORE	TEMP_REG,	0043				; store the temp reg into scratchpad location (67)
			
			LOAD	TEMP_REG,	ASCII_O				; load the ASCII value for o
			STORE	TEMP_REG,	0044				; store the temp reg into scratchpad location (68)
			
			LOAD	TEMP_REG,	ASCII_T				; load the ASCII value for t
			STORE	TEMP_REG,	0045				; store the temp reg into scratchpad location (69)
			
			LOAD	TEMP_REG,	ASCII_E				; load the ASCII value for e
			STORE	TEMP_REG,	0046				; store the temp reg into scratchpad location (70)
			
			LOAD	TEMP_REG,	ASCII_L				; load the ASCII value for l
			STORE	TEMP_REG,	0047				; store the temp reg into scratchpad location (71)
			
			LOAD	TEMP_REG,	ASCII_O				; load the ASCII value for o
			STORE	TEMP_REG,	0048				; store the temp reg into scratchpad location (72)
				
			LOAD	TEMP_REG,	ASCII_CR			; load the ASCII value for <CR>
			STORE	TEMP_REG,	0049				; store the temp reg into scratchpad location (73)
			
			LOAD	TEMP_REG, 	ASCII_LF			; load the ASCII value for <LF>
			STORE	TEMP_REG,	004A				; store the temp reg into scratchpad location (74)
			
			LOAD	TEMP_REG,	ASCII_TAB			; load the ASCII value for tab
			STORE	TEMP_REG,	004B				; store the temp reg into scratchpad location (75)
			
			LOAD	TEMP_REG,	ASCII_SPACE			; load the ASCII value for space
			STORE	TEMP_REG,	004C				; store the temp reg into scratchpad location (76)
			
			LOAD	TEMP_REG,	ASCII_SPACE			; load the ASCII value for space
			STORE	TEMP_REG,	004D				; store the temp reg into scratchpad location (77)
			
			LOAD	TEMP_REG,	ASCII_SPACE			; load the ASCII value for space
			STORE	TEMP_REG,	004E				; store the temp reg into scratchpad location (78)
			
			LOAD	TEMP_REG,	ASCII_SPACE			; load the ASCII value for space
			STORE	TEMP_REG,	004F				; store the temp reg into scratchpad location (79)
			
			LOAD	TEMP_REG,	ASCII_U				; load the ASCII value for U
			STORE	TEMP_REG,	0050				; store the temp reg into scratchpad location (80)
			
			LOAD	TEMP_REG,	ASCII_A				; load the ASCII value for A
			STORE	TEMP_REG,	0051				; store the temp reg into scratchpad location (81)
			
			LOAD	TEMP_REG,	ASCII_R				; load the ASCII value for R
			STORE	TEMP_REG,	0052				; store the temp reg  into scratchpad location (82)
			
			LOAD	TEMP_REG,	ASCII_T				; load the ASCII value for T
			STORE	TEMP_REG,	0053				; store the temp reg into scratchpad location (83)
			
			LOAD	TEMP_REG,	ASCII_CR			; load the ASCII value for <CR>
			STORE	TEMP_REG,	0054				; store the temp reg into scratchpad location (84)
			
			LOAD	TEMP_REG, 	ASCII_LF			; load the ASCII value for <LF>
			STORE	TEMP_REG,	0055				; store the temp reg into scratchpad location (85)
				
			LOAD	TEMP_REG,	ASCII_SLASH
			LOAD	COUNT,		0056				; load register R3 with hex value 86
LAST		STORE	TEMP_REG,	COUNT
									
			ADD		COUNT,		0001				; increment count to point to the next scratchpad location		
			
			COMP	COUNT,  	007E				; if rX == kk then ZERO = 1; if rx < kk then CARRY = 1
			JUMPC	LAST							; if CARRY PC <â€” ADD_SLASH
			
			LOAD	TEMP_REG,	ASCII_CR			; load the ASCII value for <CR>
			STORE	TEMP_REG,	007F				; store the temp reg into scratchpad location (127)
			
			LOAD	TEMP_REG, 	ASCII_LF			; load the ASCII value for <LF>
			STORE	TEMP_REG,	0080				; store the temp reg into scratchpad (location 128) 
													; end of banner
			
;=======================================================
;	Prompt User Subroutine
;	Allows the user to type
;	C:\User>
;=======================================================
PROMPT_USER
			
			LOAD	TEMP_REG,	ASCII_C				; load the ASCII value C
			STORE	TEMP_REG,	0081				; store the temp reg intro scratchpad location (129)
			
			LOAD	TEMP_REG,	ASCII_COLON			; load the ASCII value for :
			STORE	TEMP_REG,	0082				; store the temp reg into scratchpad location (130)
			
			LOAD	TEMP_REG,	ASCII_B_SLASH		; load the ASCII value for '\'
			STORE	TEMP_REG,	0083				; store the temp reg into scratchpad location (131)
			
			LOAD	TEMP_REG,	ASCII_U				; load the ASCII value U
			STORE	TEMP_REG,	0084				; store the temp reg into scratchpad location (132)

			LOAD	TEMP_REG,	ASCII_S				; load the ASCII value S
			STORE	TEMP_REG,	0085				; store the temp reg into scratchpad location (133)			
			
			LOAD	TEMP_REG,	ASCII_E				; load the ASCII value E
			STORE	TEMP_REG,	0086				; store the temp reg into scratchpad location (134)
			
			LOAD	TEMP_REG,	ASCII_R				; load the ASCII value R
			STORE	TEMP_REG,	0087				; store the temp reg into scratchpad location (135)
			
			LOAD	TEMP_REG,	ASCII_GREATER		; load the ASCII value >
			STORE	TEMP_REG,	0088				; store the temp reg into scratchpad location (136)
		
;=======================================================
;	TOWN Subroutine
;	Prints the designer's hometown
;	Hometown: Boyle Heights
;=======================================================
TOWN
			LOAD	TEMP_REG,	ASCII_H				; load the ASCII value T
			STORE	TEMP_REG,	0089				; store the temp reg into scratchpad location (137)
			
			LOAD	TEMP_REG,	ASCII_O				; load the ASCII value T
			STORE	TEMP_REG,	008A				; store the temp reg into scratchpad location (138)
			
			LOAD	TEMP_REG,	ASCII_M				; load the ASCII value T
			STORE	TEMP_REG,	008B				; store the temp reg into scratchpad location (139)
			
			LOAD	TEMP_REG,	ASCII_E				; load the ASCII value T
			STORE	TEMP_REG,	008C				; store the temp reg into scratchpad location (140)
			
			LOAD	TEMP_REG,	ASCII_T				; load the ASCII value T
			STORE	TEMP_REG,	008D				; store the temp reg into scratchpad location (141)
			
			LOAD	TEMP_REG,	ASCII_O				; load the ASCII value O
			STORE	TEMP_REG,	008E				; store the temp reg into scratchpad location (142)
			
			LOAD	TEMP_REG,	ASCII_W				; load the ASCII value W
			STORE 	TEMP_REG,	008F				; store the temp reg into scratchpad location (143)
						
			LOAD 	TEMP_REG,	ASCII_N				; load the ASCII value N
			STORE	TEMP_REG,	0090				; store the temp reg into scratchpad location (144)
			
			LOAD	TEMP_REG,	ASCII_COLON			; load the ASCII value :
			STORE	TEMP_REG, 	0091				; store the temp reg into scratchpad location (145)
			
			LOAD	TEMP_REG,	ASCII_SPACE			; load the ASCII value space
			STORE	TEMP_REG,	0092				; store the temp reg into scratchpad location (146)
			
			LOAD	TEMP_REG,	ASCII_B				; load the ASCII value B
			STORE	TEMP_REG,	0093				; store the temp reg into scratchpad location (147)
			
			LOAD	TEMP_REG,	ASCII_O				; load the ASCII value O
			STORE	TEMP_REG,	0094				; store the temp reg into scratchpad location (148)
			
			LOAD	TEMP_REG,	ASCII_Y				; load the ASCII value Y
			STORE	TEMP_REG,	0095				; store the temp reg into scratchpad location (149)
			
			LOAD	TEMP_REG,	ASCII_L				; load the ASCII value L
			STORE	TEMP_REG,	0096				; store the temp reg into scratchpad location (150)
			
			LOAD	TEMP_REG,	ASCII_E				; load the ASCII value E
			STORE	TEMP_REG,	0097				; store the temp reg into scratchpad location (151)
			
			LOAD	TEMP_REG,	ASCII_SPACE			; load the ASCII value space
			STORE	TEMP_REG,	0098				; store the temp reg into scratchpad location (152)
			
			LOAD	TEMP_REG,	ASCII_H				; load the ASCII value H
			STORE	TEMP_REG,	0099				; store the temp reg into scratchpad location (153)
			
			LOAD	TEMP_REG,	ASCII_E				; load the ASCII value E
			STORE	TEMP_REG,	009A				; store the temp reg into scratchpad location (154)
			
			LOAD	TEMP_REG,	ASCII_I				; load the ASCII value I 
			STORE	TEMP_REG,	009B				; store the temp reg into scratchpad location (155)
			
			LOAD	TEMP_REG,	ASCII_G				; load the ASCII value G
			STORE	TEMP_REG,	009C				; store the temp reg into scratchpad location (156)
			
			LOAD	TEMP_REG,	ASCII_H				; load the ASCII value H
			STORE	TEMP_REG,	009D				; store the temp reg into scratchpad location (157)
			
			LOAD	TEMP_REG,	ASCII_T				; load the ASCII value T
			STORE	TEMP_REG,	009E				; store the temp reg into scratchpad location (158)
			
			LOAD	TEMP_REG,	ASCII_S				; load the ASCII value S
			STORE	TEMP_REG,	009F				; store the temp reg into scratchpad location (159)
			
			LOAD	TEMP_REG,	ASCII_CR			; load the ASCII value CR
			STORE	TEMP_REG,	00A0				; store the temp reg into scratchpad location (160)
			
			LOAD	TEMP_REG,	ASCII_LF			; load the ASCII value LF
			STORE	TEMP_REG,	00A1				; store the temp reg into scratchpad location (161)
													; end of town
			
;=======================================================
;	Backspace	
;	Allows the user to move the display cursor one 
;	position backwards and deletes the character at 
;	that position
;=======================================================
BACKSPACE
			LOAD	TEMP_REG,	ASCII_BS			; load the ASCII value for backspace
			STORE	TEMP_REG,	00A2				; store the temp reg into scratchpad location (162)
			
			LOAD	TEMP_REG, 	ASCII_SPACE			; load the ASCII value for space
			STORE	TEMP_REG,	00A3				; store the temp reg into scratchpad location (163)
			
			LOAD	TEMP_REG,	ASCII_BS			; load the ASCII value for backspace
			STORE	TEMP_REG,	00A4				; store the temp reg into scratchpad (location 164)
			
			RETURN
		 
;=======================================================
;	Carriage Return and line feed
;	They're used to note the termination of a line
;=======================================================
CRLF		
			LOAD	TEMP_REG,	ASCII_CR			; load the ASCII value for <CR>
			STORE	TEMP_REG,	00A5				; store the temp reg into scratchpad location (165)
			
			LOAD	TEMP_REG,	ASCII_LF			; load the ASCII value for <LF>
			STORE	TEMP_REG,	00A6				; store the temp reg into scratchpad location (166)
			
			RETURN
		
;=======================================================
;	TX Subroutine
;=======================================================
TX

			COMP	CURRENT_CASE, ZERO				; compare register R5 with literal 0000
			RETURNZ									; if ZERO return from subroutine

			FETCH	TEMP_REG,	POINTER				; read scratchpad RAM location into register R0
			OUTPUT	TEMP_REG,	ZERO				; Write register R0 to port 0000
			ADD		POINTER,	ONE	
			
			COMP	CURRENT_CASE, 0001				; compare register R5 with 0001 (case 1)
			JUMPZ	SHOW_BANNER						; jump if ZERO to SHOW_BANNER
			
			COMP	CURRENT_CASE, 0002				; compare register R5 with 0002 (case 2)
			JUMPZ	SHOW_PROMPT_USER				; jump if ZERO to SHOW_PROMPT_USER
			
			COMP	CURRENT_CASE, 0003				; compare register R5 with 0003	(case 3)
			JUMPZ	SHOW_TOWN						; jump if ZERO to SHOW_TOWN
			
			COMP	CURRENT_CASE, 0004				; compare register R5 with 0004 (case 4)
			JUMPZ	SHOW_BACKSPACE					; jump if ZERO to SHOW_BACKSPACE
			
			COMP	CURRENT_CASE, 0005				; compare register R5 with 0005 (case 5)
			JUMPZ	SHOW_CRLF						; jump if ZERO to SHOW_CRLF
			
			COMP	CURRENT_CASE, 0006				; compare register R5 with 0006	(case 6)			
			JUMPZ	SHOW_COUNT						; jump if ZERO to SHOW_COUNT
			
			RETURN
			
SHOW_BANNER

			COMP	POINTER,	  0081				; compare register R1 with 0081
			RETURNC									; if CARRY return from subroutine
			LOAD	CURRENT_CASE, 0002				; load register R5 with 0002 
			RETURN									; unconditionally return from subroutine
			

SHOW_PROMPT_USER
			
			COMP	POINTER,	  0089				; compare register R1 with 0089
			RETURNC									; if CARRY return from subroutine
			LOAD	CURRENT_CASE, 0000				; load register R5 with 0000
			RETURN									; Unconditionally return from subroutine
			
SHOW_TOWN
			
			COMP	POINTER, 	  00A2				; compare register R1 with 00A1
			RETURNC									; if CARRY return from subroutine
			LOAD	POINTER,	  0081				; load register R1 with 0080
			LOAD	CURRENT_CASE, 0002				; load register R5 with 0002
			RETURN									; unconditionally return from subroutine
			
SHOW_BACKSPACE
			
			COMP	POINTER,	  00A5				; compare register R1 with 00A4  
			RETURNC									; if CARRY return from subroutine
			LOAD	CURRENT_CASE, 0000				; load register R5 with 0000 (do nothing)
			RETURN									; unconditionally return from subroutine
			
SHOW_CRLF
			
			COMP	POINTER, 	  00A7				; compare register R1 with 00A6
			RETURNC									; if CARRY return from subroutine
			LOAD	POINTER,      0081				; load register R1 with 0081
			LOAD	CURRENT_CASE, 0002				; load register R5 with 0002
			RETURN
			
SHOW_COUNT

			COMP	POINTER,	  00A9				; compare register R1 with 00A6 	
			RETURNC									; if CARRY return from subroutine
			LOAD	POINTER,	  00A5				; load register R1 with 00A5
			LOAD	CURRENT_CASE, 0005				; load register R5 with literal kk
			RETURN
			
;=======================================================
;	RX Subroutine
;=======================================================
RX

			COMP	CURRENT_CASE,	ZERO			; compare register R5 with 0000
			RETURNNZ								; if NOT ZERO return from subroutine
			
			INPUT	STORE_DATA,		ZERO			; Read input port 0000 into register R7
			COMP	STORE_DATA,		ZERO
			RETURNZ									; if ZERO return from subroutine
			
			COMP	STORE_DATA,		ASCII_ASTERISK  ; compare register R7 with ASCII asterisk
			JUMPZ	RECEIVE_TOWN					; jump if ZERO to RECEIVE_TOWN
			
			COMP	STORE_DATA,		ASCII_BS		; compare register R7 with ASCII backspace
			JUMPZ	RECEIVE_BACKSPACE				; jump if ZERO to RECEIVE_BACKSPACE
			
			COMP	STORE_DATA,		ASCII_CR		; compare register R7 with ASCII CR
			JUMPZ	RECEIVE_CRLF					; jump if ZERO to RECEIVE_CRLF
			
			COMP	STORE_DATA,		ASCII_AT		; compare register R7 with ASCII @
			JUMPZ	RECIEVE_AT						; jump if ZERO to RECEIVE_AT
			
			; echoing used to display char count
			ADD		CHAR_COUNT,		0001
			OUTPUT	STORE_DATA,		ZERO
			COMP	CHAR_COUNT,		0029
			JUMPZ	RECEIVE_CRLF
		
			RETURN
			
RECEIVE_TOWN
			
			LOAD	CURRENT_CASE, 0003				; load register R5 with literal kk
			LOAD	POINTER,	  0089				; beginning of hometown
			LOAD	TEMP_REG,	  0000				; load register R0 with 0000
			OUTPUT	TEMP_REG,	  0000
			LOAD	CHAR_COUNT,	  0000
			RETURN									; unconditionally return from subroutine
			
RECEIVE_BACKSPACE
			
			COMP	CHAR_COUNT,	  0000
			RETURNZ									; if ZERO return from subroutine
			LOAD	CURRENT_CASE, 0004				; load register R5
			LOAD	POINTER,	  00A2				; start bs
			LOAD	TEMP_REG,	  0000				; load register R0 with 0000
			OUTPUT	TEMP_REG,	  0000
			SUB		CHAR_COUNT,	  0001
			RETURN									; unconditionally return from subroutine

RECEIVE_CRLF
			
			LOAD	CURRENT_CASE, 0005				; load register R5 with literal kk
			LOAD	POINTER,	  00A5				; start crlf
			LOAD	TEMP_REG,	  0000				; load register R0 with 0000
			OUTPUT	TEMP_REG,	  0000
			LOAD	CHAR_COUNT,   0000
			RETURN									; unconditionally return from subroutine

RECIEVE_AT
			
			CALL	BinToASC						; Unconditionally call subroutine BIN_TO_ASCII
			LOAD	CURRENT_CASE, 0006				; load register R5 with literal kk
			LOAD	Pointer,      00A7
			LOAD	TEMP_REG,	  0000				; load register R0 with 0000
			OUTPUT	TEMP_REG,	  0000
			LOAD	CHAR_COUNT,	  0000
			RETURN									; unconditionally return from subroutine

;=======================================================
;	BIN_TO_ASCII
;=======================================================
BinToASC
        LOAD   	RE, CHAR_COUNT						; load register RE with contents of register R6 				
		
		LOAD	RD, 000A							; load register RD with 000A(10)								
		CALL	FINDIT								; suspend current execution and branch to the FINDIT routine
		ADD		RB, 0030							; add register RB with 0x30										
		STORE	RB, 00A7							; write register RB to scratchpad RAM location 0x15 <- change this!
		
		ADD		RE, 0030							; add register RE with 0x30	
		STORE	RE, 00A8							; write register RB to scratchpad RAM location 0x16 <- change this!!
		
		RETURN
		
;=======================================================
;	FInd It Routine
;=======================================================
FINDIT
		LOAD	RB, ZERO							; load register RB with 0
		
REPEAT	SUB		RE, RD								; subtract register RD from register RE 						
		JUMPC	FOUNDIT								; jump if CARRY to FOUNDIT										
		ADD		RB, 0001							; add register RB with 1										
		JUMP	REPEAT								; unconditionally jump to REPEAT								
FOUNDIT
		ADD		RE, RD								; add register RE with RD										
		
		RETURN										; unconditionally return from subroutine						

;=======================================================
;	ISR
;=======================================================
		ADDRESS 0300
ISR  
		INPUT	UART_STATUS,	PORT				; Read input port 0001 into register R4
		AND		UART_STATUS,	0003				; check Tx ready and Rx ready
		
		COMP	UART_STATUS,	0003				; if tx ready and rx ready are high
		JUMPZ	BOTH_RX_TX							; jump if ZERO to aaa
		
		COMP	UART_STATUS,	TX_RDY				; if tx ready is high
		CALLZ	TX									; if ZERO call subroutine at aaa
		
		COMP	UART_STATUS,	RX_RDY				; if rx ready is high
		CALLZ	RX									; if ZERO call subroutine at aaa
		
		RETEN
		
BOTH_RX_TX
		
		CALL	TX									; Unconditionally call subroutine TX
		CALL	RX									; Unconditionally call subroutine RX
		
		RETEN
		
;=======================================================
;	Main Loop
;	main loop is where processor spends most of its time
;=======================================================
MAIN    
		; update LEDs
		JUMP	MAIN


;=======================================================
;	ISR vectored through 0FFE
;=======================================================
        ADDRESS 0FFE
ENDIT   
		JUMP ISR

        END


